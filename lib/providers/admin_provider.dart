import 'package:flutter/foundation.dart';
import '../models/university.dart';
import '../services/firebase_university_service.dart';

class AdminProvider with ChangeNotifier {
  // √âtat des universit√©s dans l'administration
  List<University> _adminUniversities = [];
  bool _isLoading = false;
  String? _error;

  // Getters
  List<University> get adminUniversities => _adminUniversities;
  bool get isLoading => _isLoading;
  String? get error => _error;

  /// Charger toutes les universit√©s depuis Firebase pour l'administration
  Future<void> loadAdminUniversities() async {
    _setLoading(true);
    _error = null;
    
    try {
      print('üî• AdminProvider: Chargement des universit√©s depuis Firebase...');
      
      // Charger UNIQUEMENT depuis Firebase
      List<University> firebaseUniversities = await FirebaseUniversityService.getAllUniversities();
      print('‚úÖ AdminProvider: ${firebaseUniversities.length} universit√©s charg√©es depuis Firebase');
      
      _adminUniversities = firebaseUniversities;
      print('‚úÖ AdminProvider: ${_adminUniversities.length} universit√©s totales charg√©es');
      
    } catch (e) {
      _error = 'Erreur lors du chargement des universit√©s: $e';
      print('‚ùå AdminProvider: $_error');
      debugPrint(e.toString());
    } finally {
      _setLoading(false);
    }
  }

  /// Ajouter une nouvelle universit√©
  Future<bool> addUniversity(University university) async {
    _setLoading(true);
    _error = null;
    
    try {
      print('üî• AdminProvider: Ajout universit√© ${university.name}...');
      
      // Sauvegarder UNIQUEMENT dans Firebase
      await FirebaseUniversityService.saveUniversity(university);
      
      // Ajouter √† la liste locale imm√©diatement pour l'UI
      _adminUniversities.add(university);
      notifyListeners();
      
      print('‚úÖ AdminProvider: Universit√© ajout√©e avec succ√®s');
      return true;
      
    } catch (e) {
      _error = 'Erreur lors de l\'ajout: $e';
      print('‚ùå AdminProvider: $_error');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Mettre √† jour une universit√©
  Future<bool> updateUniversity(University university) async {
    _setLoading(true);
    _error = null;
    
    try {
      print('üî• AdminProvider: Mise √† jour universit√© ${university.name}...');
      
      // Mettre √† jour dans Firebase
      await FirebaseUniversityService.updateUniversity(university);
      
      // Mettre √† jour dans la liste locale
      int index = _adminUniversities.indexWhere((u) => u.id == university.id);
      if (index != -1) {
        _adminUniversities[index] = university;
        notifyListeners();
      }
      
      print('‚úÖ AdminProvider: Universit√© mise √† jour avec succ√®s');
      return true;
      
    } catch (e) {
      _error = 'Erreur lors de la mise √† jour: $e';
      print('‚ùå AdminProvider: $_error');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Supprimer une universit√©
  Future<bool> deleteUniversity(String universityId) async {
    _setLoading(true);
    _error = null;
    
    try {
      print('üî• AdminProvider: Suppression universit√© $universityId...');
      
      // Supprimer de Firebase
      await FirebaseUniversityService.deleteUniversity(universityId);
      
      // Supprimer de la liste locale
      _adminUniversities.removeWhere((u) => u.id == universityId);
      notifyListeners();
      
      print('‚úÖ AdminProvider: Universit√© supprim√©e avec succ√®s');
      return true;
      
    } catch (e) {
      _error = 'Erreur lors de la suppression: $e';
      print('‚ùå AdminProvider: $_error');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Recharger les universit√©s
  Future<void> refreshUniversities() async {
    await loadAdminUniversities();
  }

  /// Rechercher une universit√© par ID
  University? findUniversityById(String id) {
    try {
      return _adminUniversities.firstWhere((u) => u.id == id);
    } catch (e) {
      return null;
    }
  }

  /// Effacer l'erreur
  void clearError() {
    _error = null;
    notifyListeners();
  }

  // M√©thodes priv√©es
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }
}
