import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';

class LocationService {
  static Position? _currentPosition;
  
  /// Obtenir la position actuelle de l'utilisateur
  static Future<Position?> getCurrentPosition() async {
    print('üìç LocationService: Demande de localisation...');
    
    try {
      // V√©rifier si la localisation est activ√©e
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('‚ùå Service de localisation d√©sactiv√©');
        return null;
      }

      // V√©rifier les permissions
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print('‚ùå Permission de localisation refus√©e');
          return null;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print('‚ùå Permission de localisation refus√©e d√©finitivement');
        return null;
      }

      // Obtenir la position
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      
      _currentPosition = position;
      print('‚úÖ Position obtenue: ${position.latitude}, ${position.longitude}');
      return position;
      
    } catch (e) {
      print('‚ùå Erreur lors de l\'obtention de la position: $e');
      return null;
    }
  }

  /// Calculer la distance entre deux points en kilom√®tres
  static double calculateDistance(
    double startLat, 
    double startLng, 
    double endLat, 
    double endLng
  ) {
    return Geolocator.distanceBetween(startLat, startLng, endLat, endLng) / 1000;
  }

  /// Calculer la distance entre la position actuelle et une universit√©
  static double? calculateDistanceToUniversity(double uniLat, double uniLng) {
    if (_currentPosition == null) return null;
    
    return calculateDistance(
      _currentPosition!.latitude,
      _currentPosition!.longitude,
      uniLat,
      uniLng,
    );
  }

  /// Formater la distance pour l'affichage
  static String formatDistance(double distanceKm) {
    if (distanceKm < 1) {
      return '${(distanceKm * 1000).round()} m';
    } else if (distanceKm < 10) {
      return '${distanceKm.toStringAsFixed(1)} km';
    } else {
      return '${distanceKm.round()} km';
    }
  }

  /// Obtenir le nom de la ville √† partir des coordonn√©es
  static Future<String?> getCityFromCoordinates(double latitude, double longitude) async {
    try {
      print('üåç G√©ocodage inverse: $latitude, $longitude');
      
      List<Placemark> placemarks = await placemarkFromCoordinates(latitude, longitude);
      
      if (placemarks.isNotEmpty) {
        Placemark placemark = placemarks.first;
        
        // Essayer diff√©rents niveaux de localisation
        String? city = placemark.locality ?? 
                      placemark.subAdministrativeArea ?? 
                      placemark.administrativeArea ?? 
                      placemark.country;
        
        print('‚úÖ Ville trouv√©e: $city');
        return city;
      }
      
      print('‚ùå Aucune ville trouv√©e');
      return null;
      
    } catch (e) {
      print('‚ùå Erreur g√©ocodage inverse: $e');
      return null;
    }
  }

  /// Obtenir la position sauvegard√©e
  static Position? get currentPosition => _currentPosition;

  /// V√©rifier si on a une position
  static bool get hasLocation => _currentPosition != null;
}
