import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/advertisement.dart';

class FirebaseAdvertisementService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _collection = 'advertisements';

  /// M√©thode d'instance pour compatibilit√©
  Future<List<Advertisement>> getAdvertisements() async {
    return await getActiveAdvertisements();
  }

  /// Charger toutes les publicit√©s pour l'admin (incluant inactives)
  static Future<List<Advertisement>> getAllAdvertisementsForAdmin() async {
    try {
      debugPrint('üîÑ Chargement de toutes les publicit√©s pour admin...');
      
      final QuerySnapshot snapshot = await _firestore
          .collection(_collection)
          .orderBy('priority', descending: true)
          .orderBy('created_at', descending: true)
          .get();

      final List<Advertisement> advertisements = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Advertisement.fromJson(data);
      }).toList();

      debugPrint('üéØ ${advertisements.length} publicit√©s charg√©es pour admin');
      return advertisements;
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement pour admin: $e');
      rethrow;
    }
  }

  /// Charger uniquement les publicit√©s actives et valides pour l'app
  static Future<List<Advertisement>> getActiveAdvertisements() async {
    try {
      debugPrint('üîÑ Chargement des publicit√©s actives...');
      
      // Requ√™te simplifi√©e sans tri pour √©viter le probl√®me d'index
      final QuerySnapshot snapshot = await _firestore
          .collection(_collection)
          .where('is_active', isEqualTo: true)
          .get();

      final List<Advertisement> advertisements = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Advertisement.fromJson(data);
      }).toList();

      // Filtrer uniquement les publicit√©s valides (non expir√©es) et trier en m√©moire
      final validAdvertisements = advertisements
          .where((ad) => ad.isValid)
          .toList()
        ..sort((a, b) => b.priority.compareTo(a.priority)); // Tri par priorit√© d√©croissante

      debugPrint('üéØ ${advertisements.length} publicit√©s trouv√©es, ${validAdvertisements.length} valides');
      return validAdvertisements;
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement des publicit√©s actives: $e');
      rethrow;
    }
  }

  /// Ajouter une nouvelle publicit√©
  static Future<bool> addAdvertisement(Advertisement advertisement) async {
    try {
      debugPrint('üìù Ajout d\'une nouvelle publicit√©: ${advertisement.title}');
      
      final data = advertisement.toJson();
      data.remove('id'); // Firestore g√©n√®re l'ID automatiquement
      data['created_at'] = FieldValue.serverTimestamp();
      data['updated_at'] = FieldValue.serverTimestamp();

      await _firestore.collection(_collection).add(data);
      
      debugPrint('‚úÖ Publicit√© ajout√©e avec succ√®s');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'ajout de la publicit√©: $e');
      return false;
    }
  }

  /// Mettre √† jour une publicit√© existante
  static Future<bool> updateAdvertisement(Advertisement advertisement) async {
    try {
      debugPrint('üìù Mise √† jour de la publicit√©: ${advertisement.title}');
      
      final data = advertisement.toJson();
      data.remove('id');
      data.remove('created_at'); // Ne pas modifier la date de cr√©ation
      data['updated_at'] = FieldValue.serverTimestamp();

      await _firestore.collection(_collection).doc(advertisement.id).update(data);
      
      debugPrint('‚úÖ Publicit√© mise √† jour avec succ√®s');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la mise √† jour de la publicit√©: $e');
      return false;
    }
  }

  /// Supprimer d√©finitivement une publicit√©
  static Future<bool> deleteAdvertisement(String advertisementId) async {
    try {
      debugPrint('üóëÔ∏è Suppression de la publicit√©: $advertisementId');
      
      await _firestore.collection(_collection).doc(advertisementId).delete();
      
      debugPrint('‚úÖ Publicit√© supprim√©e avec succ√®s');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la suppression de la publicit√©: $e');
      return false;
    }
  }

  /// D√©sactiver une publicit√© (soft delete)
  static Future<bool> deactivateAdvertisement(String advertisementId) async {
    try {
      debugPrint('‚è∏Ô∏è D√©sactivation de la publicit√©: $advertisementId');
      
      await _firestore.collection(_collection).doc(advertisementId).update({
        'is_active': false,
        'updated_at': FieldValue.serverTimestamp(),
      });
      
      debugPrint('‚úÖ Publicit√© d√©sactiv√©e avec succ√®s');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©sactivation de la publicit√©: $e');
      return false;
    }
  }

  /// Activer une publicit√©
  static Future<bool> activateAdvertisement(String advertisementId) async {
    try {
      debugPrint('‚ñ∂Ô∏è Activation de la publicit√©: $advertisementId');
      
      await _firestore.collection(_collection).doc(advertisementId).update({
        'is_active': true,
        'updated_at': FieldValue.serverTimestamp(),
      });
      
      debugPrint('‚úÖ Publicit√© activ√©e avec succ√®s');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'activation de la publicit√©: $e');
      return false;
    }
  }

  /// Charger une publicit√© sp√©cifique par ID
  static Future<Advertisement?> getAdvertisementById(String id) async {
    try {
      final DocumentSnapshot doc = await _firestore
          .collection(_collection)
          .doc(id)
          .get();

      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Advertisement.fromJson(data);
      }
      return null;
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement de la publicit√© $id: $e');
      return null;
    }
  }

  /// √âcouter les changements de publicit√©s en temps r√©el pour l'admin
  static Stream<List<Advertisement>> watchAllAdvertisements() {
    return _firestore
        .collection(_collection)
        .orderBy('priority', descending: true)
        .orderBy('created_at', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return Advertisement.fromJson(data);
      }).toList();
    });
  }

  /// √âcouter les changements de publicit√©s actives en temps r√©el pour l'app
  static Stream<List<Advertisement>> watchActiveAdvertisements() {
    return _firestore
        .collection(_collection)
        .where('is_active', isEqualTo: true)
        .orderBy('priority', descending: true)
        .snapshots()
        .map((snapshot) {
      final advertisements = snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return Advertisement.fromJson(data);
      }).toList();

      // Filtrer uniquement les publicit√©s valides
      return advertisements.where((ad) => ad.isValid).toList();
    });
  }

  /// Compter le nombre de publicit√©s actives
  static Future<int> getActiveAdvertisementsCount() async {
    try {
      final AggregateQuerySnapshot snapshot = await _firestore
          .collection(_collection)
          .where('is_active', isEqualTo: true)
          .count()
          .get();
      
      return snapshot.count ?? 0;
    } catch (e) {
      debugPrint('‚ùå Erreur lors du comptage des publicit√©s: $e');
      return 0;
    }
  }

  /// Marquer une publicit√© comme vue (optionnel pour les statistiques)
  static Future<void> markAdvertisementAsViewed(String advertisementId) async {
    try {
      await _firestore
          .collection('advertisement_views')
          .add({
        'advertisement_id': advertisementId,
        'viewed_at': FieldValue.serverTimestamp(),
        'platform': defaultTargetPlatform.name,
      });
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'enregistrement de la vue: $e');
    }
  }
}
